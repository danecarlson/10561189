import java.util.LinkedList;
import java.util.List;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class Input
{
	String path;
	BufferedReader file;
	String line;
	int size;
	char [][] puzzle;
	List<String> words;
	public enum Direction {UP,DOWN,UPLEFT,UPRIGHT,LEFT,RIGHT,DOWNLEFT,DOWNRIGHT, NONE}
	
	
	public Input(String input){
			path = input;
			try{
				file = new BufferedReader(new FileReader(input));
				line = file.readLine();
				size = 0;
				pullPuzzle();
				words = pullWords();
				
				
				char [] param = {'A','A','H','I','G','A'}; 
				findDirection( param, 5,5);
			}
			catch(IOException e)
			{
				System.out.println("bad path");
			}
		
		}
	
	public Direction findDirection(char[] letters, int x, int y){
	
		char nextL = letters[1];
		Direction dir = Direction.NONE;
			
			
			for(int b = y-1; Math.abs(b-y) <= 1; b++){
				for(int a = x-1; Math.abs(a-x) <= 1; a++){//left to right, b is down another row
					
					if(b >= 0 && a >= 0 && a < size && b < size){//if appropriate
					
						if(puzzle[a][b] == nextL && !((a == x) && (b == y))){
							int xdif = a-x;
							int ydif = b-y;
							switch(xdif){
								case -1://left
									switch(ydif){
									case -1://moved up
										System.out.println(Direction.UPLEFT);
										return Direction.UPLEFT;
										
									case 0://neither up nor down
										System.out.println(Direction.LEFT);
										return Direction.LEFT;
										
									case 1://moved down
										System.out.println(Direction.DOWNLEFT);
										return Direction.DOWNLEFT;
										
									}
								break;
								
								
								case 0://neither left nor right
									switch(ydif){
									case -1://moved up
										System.out.println(Direction.UP);
										return Direction.UP;
										
									case 0://neither up nor down
										System.out.println(Direction.NONE);
										return Direction.NONE;
										
									case 1://moved down
										System.out.println(Direction.DOWN);
										return Direction.DOWN;
										
									}
								break;
								
								
								case 1://right
									switch(ydif){
									case -1://moved up
										System.out.println(Direction.UPRIGHT);
										return Direction.UPRIGHT;
										
									case 0://neither up nor down
										System.out.println(Direction.RIGHT);
										return Direction.RIGHT;
										
									case 1://moved down
										System.out.println(Direction.DOWNRIGHT);
										return Direction.DOWNRIGHT;
										
									}
								break;
								
								default:
									return Direction.NONE;
							}
							System.out.println("found " + nextL);
							System.out.println("It was " + dir);
							return Direction.NONE;

							
						}
						
					//}
				
				}
			}
		}
			return Direction.NONE;
	
	
	}

	public void pullPuzzle() throws IOException
	{	
		
		line = line.toUpperCase();
		char [] nextChar = line.toCharArray();
		size = nextChar.length;
		puzzle = new char [size][size];
		
		for(int b = 0; b < size; b++)
		{
			for(int a = 0; a < size; a++)
			{
				puzzle[a][b] = nextChar[a];
				System.out.print(puzzle[a][b]);
			}
			line = file.readLine();
			line = line.toUpperCase();
			nextChar = line.toCharArray();
			System.out.println("");
		}
	}
	
	
	public List<String> pullWords() throws IOException{
		List<String> toReturn = new LinkedList<String>(); 
		line = file.readLine();
		while(line.isEmpty()){
			line = file.readLine();
		}

		while(line != null && !(line.isEmpty())){
			toReturn.add(line);
			line = file.readLine();
		}
		return toReturn;
	}
	
	





}